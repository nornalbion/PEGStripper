/*
 * CSS parser based on the grammar described at http://www.w3.org/TR/CSS2/grammar.html.
 *
 * The parser builds a tree representing the parsed CSS, composed of basic
 * JavaScript values, arrays and objects (basically JSON). It can be easily
 * used by various CSS processors, transformers, etc.
 *
 * Note that the parser does not handle errors in CSS according to the
 * specification -- many errors which it should recover from (e.g. malformed
 * declarations or unexpected end of stylesheet) are simply fatal. This is a
 * result of straightforward rewrite of the CSS grammar to PEG.js and it should
 * be fixed sometimes.
 */

/* ===== Syntactical Elements ===== */

start
  = stylesheet:stylesheet comment* 

stylesheet
  = charset:(CHARSET_SYM STRING ";")? (S / CDO / CDC)*
    imports:(import (CDO S* / CDC S*)*)*
    rules:((ruleset / media / page) (CDO S* / CDC S*)*)* 

import
  = IMPORT_SYM S* href:(STRING / URI) S* media:media_list? ";" S* 

media
  = MEDIA_SYM S* media:media_list "{" S* rules:ruleset* "}" S* 

media_list
  = head:medium tail:("," S* medium)* 

medium
  = ident:IDENT S* 

page
  = PAGE_SYM S* qualifier:pseudo_page?
    "{" S*
    declarationsHead:declaration?
    declarationsTail:(";" S* declaration?)*
    "}" S* 

pseudo_page
  = ":" ident:IDENT S* 

operator
  = "/" S* 
  / "," S* 

combinator
  = "+" S* 
  / ">" S* 

unary_operator
  = "+"
  / "-"

property
  = ident:IDENT S* 

ruleset
  = selectorsHead:selector
    selectorsTail:("," S* selector)*
    "{" S*
    declarationsHead:declaration?
    declarationsTail:(";" S* declaration?)*
    "}" S* 

selector
  = left:simple_selector S* combinator:combinator right:selector 
  / left:simple_selector S* right:selector 
  / selector:simple_selector S* 

simple_selector
  = element:element_name
    qualifiers:(
        id:HASH 
      / class
      / attrib
      / pseudo
    )* 
  / qualifiers:(
        id:HASH 
      / class
      / attrib
      / pseudo
    )+ 

class
  = "." class_:IDENT 

element_name
  = IDENT / '*'

attrib
  = "[" S*
    attribute:IDENT S*
    operatorAndValue:(
      ('=' / INCLUDES / DASHMATCH) S*
      (IDENT / STRING) S*
    )?
    "]" 

pseudo
  = ":"
    value:(
        name:FUNCTION S* params:(IDENT S*)? ")" 
      / IDENT
    ) 

declaration
  = property:property ":" S* expression:expr important:prio? 

prio
  = IMPORTANT_SYM S*

expr
  = head:term tail:(operator? term)* 

term
  = operator:unary_operator?
    value:(
        EMS S*
      / EXS S*
      / LENGTH S*
      / ANGLE S*
      / TIME S*
      / FREQ S*
      / PERCENTAGE S*
      / NUMBER S*
    )               
  / value:URI S*    
  / function
  / hexcolor
  / value:STRING S* 
  / value:IDENT S*  

function
  = name:FUNCTION S* params:expr ")" S* 

hexcolor
  = value:HASH S* 

/* ===== Lexical Elements ===== */

/* Macros */

h
  = [0-9a-fA-F]

nonascii
  = [\x80-\xFF]

unicode
  = "\\" h1:h h2:h? h3:h? h4:h? h5:h? h6:h? ("\r\n" / [ \t\r\n\f])? 

escape
  = unicode
  / "\\" char_:[^\r\n\f0-9a-fA-F] 

nmstart
  = [_a-zA-Z]
  / nonascii
  / escape

nmchar
  = [_a-zA-Z0-9-]
  / nonascii
  / escape

integer
  = digits:[0-9]+ 

float
  = before:[0-9]* "." after:[0-9]+ 

string1
  = '"' chars:([^\n\r\f\\"] / "\\" nl:nl  / escape)* '"' 

string2
  = "'" chars:([^\n\r\f\\'] / "\\" nl:nl  / escape)* "'" 

comment
  = "/*" [^*]* "*"+ ([^/*] [^*]* "*"+)* "/"

ident
  = dash:"-"? nmstart:nmstart nmchars:nmchar* 

name
  = nmchars:nmchar+ 

num
  = float
  / integer

string
  = string1
  / string2

url
  = chars:([!#$%&*-~] / nonascii / escape)* 

s
  = [ \t\r\n\f]+

w
  = s?

nl
  = "\n"
  / "\r\n"
  / "\r"
  / "\f"

A
  = [aA]
  / "\\" "0"? "0"? "0"? "0"? "41" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "61" ("\r\n" / [ \t\r\n\f])? 

C
  = [cC]
  / "\\" "0"? "0"? "0"? "0"? "43" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "63" ("\r\n" / [ \t\r\n\f])? 

D
  = [dD]
  / "\\" "0"? "0"? "0"? "0"? "44" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "64" ("\r\n" / [ \t\r\n\f])? 

E
  = [eE]
  / "\\" "0"? "0"? "0"? "0"? "45" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "65" ("\r\n" / [ \t\r\n\f])? 

G
  = [gG]
  / "\\" "0"? "0"? "0"? "0"? "47" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "67" ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[gG] 

H
  = h:[hH]
  / "\\" "0"? "0"? "0"? "0"? "48" ("\r\n" / [ \t\r\n\f])? { return "H"; }
  / "\\" "0"? "0"? "0"? "0"? "68" ("\r\n" / [ \t\r\n\f])? { return "h"; }
  / "\\" char_:[hH] 

I
  = i:[iI]
  / "\\" "0"? "0"? "0"? "0"? "49" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "69" ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[iI] 

K
  = [kK]
  / "\\" "0"? "0"? "0"? "0"? "4" [bB] ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "6" [bB] ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[kK] 

L
  = [lL]
  / "\\" "0"? "0"? "0"? "0"? "4" [cC] ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "6" [cC] ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[lL] 

M
  = [mM]
  / "\\" "0"? "0"? "0"? "0"? "4" [dD] ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "6" [dD] ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[mM] 

N
  = [nN]
  / "\\" "0"? "0"? "0"? "0"? "4" [eE] ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "6" [eE] ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[nN] 

O
  = [oO]
  / "\\" "0"? "0"? "0"? "0"? "4" [fF] ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "6" [fF] ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[oO] 

P
  = [pP]
  / "\\" "0"? "0"? "0"? "0"? "50" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "70" ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[pP] 

R
  = [rR]
  / "\\" "0"? "0"? "0"? "0"? "52" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "72" ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[rR] 

S_
  = [sS]
  / "\\" "0"? "0"? "0"? "0"? "53" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "73" ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[sS] 

T
  = [tT]
  / "\\" "0"? "0"? "0"? "0"? "54" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "74" ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[tT] 

U
  = [uU]
  / "\\" "0"? "0"? "0"? "0"? "55" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "75" ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[uU] 

X
  = [xX]
  / "\\" "0"? "0"? "0"? "0"? "58" ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "78" ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[xX] 

Z
  = [zZ]
  / "\\" "0"? "0"? "0"? "0"? "5" [aA] ("\r\n" / [ \t\r\n\f])? 
  / "\\" "0"? "0"? "0"? "0"? "7" [aA] ("\r\n" / [ \t\r\n\f])? 
  / "\\" char_:[zZ] 

/* Tokens */

S "whitespace"
  = comment* s

CDO "<!--"
  = comment* "<!--"

CDC "-->"
  = comment* "-->"

INCLUDES "~="
  = comment* "~="

DASHMATCH "|="
  = comment* "|="

STRING "string"
  = comment* string:string 

IDENT "identifier"
  = comment* ident:ident 

HASH "hash"
  = comment* "#" name:name 

IMPORT_SYM "@import"
  = comment* "@" I M P O R T

PAGE_SYM "@page"
  = comment* "@" P A G E

MEDIA_SYM "@media"
  = comment* "@" M E D I A

CHARSET_SYM "@charset"
  = comment* "@charset "

/* Note: We replace "w" with "s" here to avoid infinite recursion. */
IMPORTANT_SYM "!important"
  = comment* "!" (s / comment)* I M P O R T A N T 

EMS "length"
  = comment* num:num e:E m:M 

EXS "length"
  = comment* num:num e:E x:X 

LENGTH "length"
  = comment* num:num unit:(P X / C M / M M / I N / P T / P C) 

ANGLE "angle"
  = comment* num:num unit:(D E G / R A D / G R A D) 

TIME "time"
  = comment* num:num unit:(m:M s:S_  / S_) 

FREQ "frequency"
  = comment* num:num unit:(H Z / K H Z) 

DIMENSION "dimension"
  = comment* num:num unit:ident 

PERCENTAGE "percentage"
  = comment* num:num "%" 

NUMBER "number"
  = comment* num:num 

URI "uri"
  = comment* U R L "(" w value:(string / url) w ")" 

FUNCTION "function"
  = comment* name:ident "(" 